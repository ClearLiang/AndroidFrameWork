package com.clearliang.frameworkdemo.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.clearliang.frameworkdemo.model.dao.OrderPay;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_PAY".
*/
public class OrderPayDao extends AbstractDao<OrderPay, Long> {

    public static final String TABLENAME = "ORDER_PAY";

    /**
     * Properties of entity OrderPay.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amount = new Property(1, int.class, "amount", false, "AMOUNT");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Metadata = new Property(4, String.class, "metadata", false, "METADATA");
        public final static Property OrderNo = new Property(5, String.class, "orderNo", false, "ORDER_NO");
        public final static Property Subject = new Property(6, String.class, "subject", false, "SUBJECT");
        public final static Property TicketId = new Property(7, String.class, "ticketId", false, "TICKET_ID");
    }


    public OrderPayDao(DaoConfig config) {
        super(config);
    }
    
    public OrderPayDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_PAY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AMOUNT\" INTEGER NOT NULL ," + // 1: amount
                "\"BODY\" TEXT," + // 2: body
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"METADATA\" TEXT," + // 4: metadata
                "\"ORDER_NO\" TEXT," + // 5: orderNo
                "\"SUBJECT\" TEXT," + // 6: subject
                "\"TICKET_ID\" TEXT);"); // 7: ticketId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_PAY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderPay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAmount());
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String metadata = entity.getMetadata();
        if (metadata != null) {
            stmt.bindString(5, metadata);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(6, orderNo);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(7, subject);
        }
 
        String ticketId = entity.getTicketId();
        if (ticketId != null) {
            stmt.bindString(8, ticketId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderPay entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAmount());
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String metadata = entity.getMetadata();
        if (metadata != null) {
            stmt.bindString(5, metadata);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(6, orderNo);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(7, subject);
        }
 
        String ticketId = entity.getTicketId();
        if (ticketId != null) {
            stmt.bindString(8, ticketId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderPay readEntity(Cursor cursor, int offset) {
        OrderPay entity = new OrderPay( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // amount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // body
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // metadata
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // subject
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // ticketId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderPay entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmount(cursor.getInt(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMetadata(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSubject(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTicketId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderPay entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderPay entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderPay entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
